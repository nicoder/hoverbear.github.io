<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Andrew Hobden</title>
 <link href="http://hoverbear.org/atom.xml" rel="self"/>
 <link href="http://hoverbear.org/"/>
 <updated>2014-06-15T23:26:06-07:00</updated>
 <id>http://hoverbear.org</id>
 <author>
   <name>Andrew Hobden</name>
   <email></email>
 </author>

 
 <entry>
   <title>A Novel Initialization Solution</title>
   <link href="http://hoverbear.org/2014/06/15/novel-init/"/>
   <updated>2014-06-15T00:00:00-07:00</updated>
   <id>http://hoverbear.org/2014/06/15/novel-init</id>
   <content type="html">&lt;p&gt;I&amp;#39;ve been exploring the handy &lt;a href=&quot;https://github.com/caolan/async&quot;&gt;&lt;code&gt;async&lt;/code&gt;&lt;/a&gt; over the last few days in the lab. One of my projects is a MongoDB API Adapter in Node.js and I was pleased by a novel way of handling control flow.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/caolan/async#autotasks-callback&quot;&gt;&lt;code&gt;async.auto()&lt;/code&gt;&lt;/a&gt; is a function offered by the libary which allows you to declare a set of tasks and their dependencies, then the library determines the best way to compose the initialization.&lt;/p&gt;

&lt;p&gt;Consider the following dependency graph:&lt;/p&gt;

&lt;p&gt;&lt;svg width=&quot;100%&quot; viewBox=&quot;0 0 1344 386&quot; version=&quot;1.1&quot;&gt;
    &lt;defs&gt;&lt;/defs&gt;
    &lt;g id=&quot;Page-1&quot; stroke=&quot;none&quot; stroke-width=&quot;1&quot; fill=&quot;none&quot; fill-rule=&quot;evenodd&quot;&gt;
        &lt;g id=&quot;Rectangle-2-+-Database-Connection&quot; transform=&quot;translate(390.000000, 44.000000)&quot;&gt;
            &lt;rect id=&quot;Rectangle-2&quot; stroke=&quot;#979797&quot; fill=&quot;#D8D8D8&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;249&quot; height=&quot;57&quot; rx=&quot;8&quot;&gt;&lt;/rect&gt;
            &lt;text id=&quot;Database-Connection&quot; font-family=&quot;Fira Sans&quot; font-size=&quot;23&quot; font-weight=&quot;normal&quot; fill=&quot;#000000&quot;&gt;
                &lt;tspan x=&quot;13.025&quot; y=&quot;37&quot;&gt;Database Connection&lt;/tspan&gt;
            &lt;/text&gt;
        &lt;/g&gt;
        &lt;g id=&quot;Rectangle-2-+-Database-Connection-4&quot; transform=&quot;translate(708.000000, 44.000000)&quot;&gt;
            &lt;rect id=&quot;Rectangle-2&quot; stroke=&quot;#979797&quot; fill=&quot;#D8D8D8&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;249&quot; height=&quot;57&quot; rx=&quot;8&quot;&gt;&lt;/rect&gt;
            &lt;text id=&quot;Setup-Schemas&quot; font-family=&quot;Fira Sans&quot; font-size=&quot;23&quot; font-weight=&quot;normal&quot; fill=&quot;#000000&quot;&gt;
                &lt;tspan x=&quot;44.374&quot; y=&quot;37&quot;&gt;Setup Schemas&lt;/tspan&gt;
            &lt;/text&gt;
        &lt;/g&gt;
        &lt;g id=&quot;Rectangle-2-+-Database-Connection-5&quot; transform=&quot;translate(1026.000000, 97.000000)&quot;&gt;
            &lt;rect id=&quot;Rectangle-2&quot; stroke=&quot;#979797&quot; fill=&quot;#D8D8D8&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;249&quot; height=&quot;57&quot; rx=&quot;8&quot;&gt;&lt;/rect&gt;
            &lt;text id=&quot;Build-Routes&quot; font-family=&quot;Fira Sans&quot; font-size=&quot;23&quot; font-weight=&quot;normal&quot; fill=&quot;#000000&quot;&gt;
                &lt;tspan x=&quot;58.082&quot; y=&quot;37&quot;&gt;Build Routes&lt;/tspan&gt;
            &lt;/text&gt;
        &lt;/g&gt;
        &lt;g id=&quot;Rectangle-2-+-Database-Connection-6&quot; transform=&quot;translate(1026.000000, 281.000000)&quot;&gt;
            &lt;rect id=&quot;Rectangle-2&quot; stroke=&quot;#979797&quot; fill=&quot;#D8D8D8&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;249&quot; height=&quot;57&quot; rx=&quot;8&quot;&gt;&lt;/rect&gt;
            &lt;text id=&quot;Listen&quot; font-family=&quot;Fira Sans&quot; font-size=&quot;23&quot; font-weight=&quot;normal&quot; fill=&quot;#000000&quot;&gt;
                &lt;tspan x=&quot;92.559&quot; y=&quot;37&quot;&gt;Listen&lt;/tspan&gt;
            &lt;/text&gt;
        &lt;/g&gt;
        &lt;g id=&quot;Rectangle-2-+-Database-Connection-2&quot; transform=&quot;translate(390.000000, 152.000000)&quot;&gt;
            &lt;rect id=&quot;Rectangle-2&quot; stroke=&quot;#979797&quot; fill=&quot;#D8D8D8&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;249&quot; height=&quot;57&quot; rx=&quot;8&quot;&gt;&lt;/rect&gt;
            &lt;text id=&quot;HTTP-Setup&quot; font-family=&quot;Fira Sans&quot; font-size=&quot;23&quot; font-weight=&quot;normal&quot; fill=&quot;#000000&quot;&gt;
                &lt;tspan x=&quot;64.292&quot; y=&quot;37&quot;&gt;HTTP Setup&lt;/tspan&gt;
            &lt;/text&gt;
        &lt;/g&gt;
        &lt;g id=&quot;Rectangle-2-+-Database-Connection-3&quot; transform=&quot;translate(708.000000, 152.000000)&quot;&gt;
            &lt;rect id=&quot;Rectangle-2&quot; stroke=&quot;#979797&quot; fill=&quot;#D8D8D8&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;249&quot; height=&quot;57&quot; rx=&quot;8&quot;&gt;&lt;/rect&gt;
            &lt;text id=&quot;HTTP-Middleware&quot; font-family=&quot;Fira Sans&quot; font-size=&quot;23&quot; font-weight=&quot;normal&quot; fill=&quot;#000000&quot;&gt;
                &lt;tspan x=&quot;33.794&quot; y=&quot;37&quot;&gt;HTTP Middleware&lt;/tspan&gt;
            &lt;/text&gt;
        &lt;/g&gt;
        &lt;g id=&quot;Rectangle-3-+-Init-2&quot; transform=&quot;translate(72.000000, 97.000000)&quot;&gt;
            &lt;rect id=&quot;Rectangle-3&quot; stroke=&quot;#979797&quot; fill=&quot;#D8D8D8&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;249&quot; height=&quot;57&quot; rx=&quot;8&quot;&gt;&lt;/rect&gt;
            &lt;text id=&quot;Init&quot; font-family=&quot;Fira Sans&quot; font-size=&quot;23&quot; font-weight=&quot;normal&quot; fill=&quot;#000000&quot;&gt;
                &lt;tspan x=&quot;107.4625&quot; y=&quot;36&quot;&gt;Init&lt;/tspan&gt;
            &lt;/text&gt;
        &lt;/g&gt;
        &lt;path d=&quot;M319.5,100.5 L389.5,68.5&quot; id=&quot;Line&quot; stroke=&quot;#000000&quot; stroke-linecap=&quot;square&quot; fill=&quot;#000000&quot; sketch:type=&quot;MSShapeGroup&quot;&gt;&lt;/path&gt;
        &lt;path id=&quot;Line-decoration-1&quot; d=&quot;M388.62006,68.9022582 C384.745699,69.5188819 381.424818,70.0474165 377.550457,70.6640402 C378.423552,72.5739366 379.17192,74.2109907 380.045015,76.1208871 C383.046281,73.594367 385.618794,71.4287783 388.62006,68.9022582 C388.62006,68.9022582 388.62006,68.9022582 388.62006,68.9022582 Z&quot; stroke=&quot;#000000&quot; stroke-linecap=&quot;square&quot; fill=&quot;#000000&quot;&gt;&lt;/path&gt;
        &lt;path d=&quot;M319.5,150.5 L390.5,183.5&quot; id=&quot;Line-2&quot; stroke=&quot;#000000&quot; stroke-linecap=&quot;square&quot; fill=&quot;#000000&quot; sketch:type=&quot;MSShapeGroup&quot;&gt;&lt;/path&gt;
        &lt;path id=&quot;Line-2-decoration-1&quot; d=&quot;M390.233104,183.37595 C387.247829,180.830554 384.689023,178.648786 381.703749,176.103391 C380.818627,178.007744 380.059951,179.640046 379.17483,181.544399 C383.045226,182.185442 386.362708,182.734907 390.233104,183.37595 C390.233104,183.37595 390.233104,183.37595 390.233104,183.37595 Z&quot; stroke=&quot;#000000&quot; stroke-linecap=&quot;square&quot; fill=&quot;#000000&quot;&gt;&lt;/path&gt;
        &lt;path d=&quot;M637.5,67.5 L707.5,67.5&quot; id=&quot;Line-3&quot; stroke=&quot;#000000&quot; stroke-linecap=&quot;square&quot; fill=&quot;#000000&quot; sketch:type=&quot;MSShapeGroup&quot;&gt;&lt;/path&gt;
        &lt;path id=&quot;Line-3-decoration-1&quot; d=&quot;M707.5,67.5 C703.72,66.45 700.48,65.55 696.7,64.5 C696.7,66.6 696.7,68.4 696.7,70.5 C700.48,69.45 703.72,68.55 707.5,67.5 C707.5,67.5 707.5,67.5 707.5,67.5 Z&quot; stroke=&quot;#000000&quot; stroke-linecap=&quot;square&quot; fill=&quot;#000000&quot;&gt;&lt;/path&gt;
        &lt;path d=&quot;M637.5,184.5 L707.5,184.5&quot; id=&quot;Line-4&quot; stroke=&quot;#000000&quot; stroke-linecap=&quot;square&quot; fill=&quot;#000000&quot; sketch:type=&quot;MSShapeGroup&quot;&gt;&lt;/path&gt;
        &lt;path id=&quot;Line-4-decoration-1&quot; d=&quot;M707.5,184.5 C703.72,183.45 700.48,182.55 696.7,181.5 C696.7,183.6 696.7,185.4 696.7,187.5 C700.48,186.45 703.72,185.55 707.5,184.5 C707.5,184.5 707.5,184.5 707.5,184.5 Z&quot; stroke=&quot;#000000&quot; stroke-linecap=&quot;square&quot; fill=&quot;#000000&quot;&gt;&lt;/path&gt;
        &lt;path d=&quot;M1151.5,152.5 L1151.5,282.5&quot; id=&quot;Line-7&quot; stroke=&quot;#000000&quot; stroke-linecap=&quot;square&quot; fill=&quot;#000000&quot; transform=&quot;translate(1151.500000, 217.500000) scale(-1, 1) translate(-1151.500000, -217.500000) &quot;&gt;&lt;/path&gt;
        &lt;path id=&quot;Line-7-decoration-1&quot; d=&quot;M1151.5,282.5 C1152.55,278.72 1153.45,275.48 1154.5,271.7 C1152.4,271.7 1150.6,271.7 1148.5,271.7 C1149.55,275.48 1150.45,278.72 1151.5,282.5 C1151.5,282.5 1151.5,282.5 1151.5,282.5 Z&quot; stroke=&quot;#000000&quot; stroke-linecap=&quot;square&quot; fill=&quot;#000000&quot;&gt;&lt;/path&gt;
        &lt;path d=&quot;M957.5,183.5 L1028.5,151.5&quot; id=&quot;Line-5&quot; stroke=&quot;#000000&quot; stroke-linecap=&quot;square&quot; fill=&quot;#000000&quot; sketch:type=&quot;MSShapeGroup&quot;&gt;&lt;/path&gt;
        &lt;path id=&quot;Line-5-decoration-1&quot; d=&quot;M1027.69944,151.860814 C1023.82185,152.456745 1020.49819,152.967544 1016.62059,153.563475 C1017.48348,155.478005 1018.2231,157.119031 1019.08598,159.033561 C1022.10069,156.5231 1024.68473,154.371276 1027.69944,151.860814 C1027.69944,151.860814 1027.69944,151.860814 1027.69944,151.860814 Z&quot; stroke=&quot;#000000&quot; stroke-linecap=&quot;square&quot; fill=&quot;#000000&quot;&gt;&lt;/path&gt;
        &lt;path d=&quot;M957.5,72.5 L1026.5,99.5&quot; id=&quot;Line-6&quot; stroke=&quot;#000000&quot; stroke-linecap=&quot;square&quot; fill=&quot;#000000&quot; sketch:type=&quot;MSShapeGroup&quot;&gt;&lt;/path&gt;
        &lt;path id=&quot;Line-6-decoration-1&quot; d=&quot;M1026.41197,99.4655518 C1023.27449,97.1103173 1020.58522,95.0915449 1017.44774,92.7363105 C1016.6825,94.6919203 1016.02658,96.3681573 1015.26135,98.3237672 C1019.16406,98.7233918 1022.50925,99.0659272 1026.41197,99.4655518 C1026.41197,99.4655518 1026.41197,99.4655518 1026.41197,99.4655518 Z&quot; stroke=&quot;#000000&quot; stroke-linecap=&quot;square&quot; fill=&quot;#000000&quot;&gt;&lt;/path&gt;
    &lt;/g&gt;
&lt;/svg&gt;&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;async&lt;/code&gt; this could be modelled like so:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;dbConn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dbConn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;schemas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;dbConn&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;schemas&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;httpMiddleware&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;httpMiddleware&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;schemas&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;routes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Definitions of functions below.&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first parameter of the function is an object of tasks. They follow the format &lt;code&gt;taskName: function&lt;/code&gt; or &lt;code&gt;taskName: [dependencies, function]&lt;/code&gt;. Tasks with dependencies will only start when those have been resolved.&lt;/p&gt;

&lt;p&gt;So async helps with the handling of dependencies, but can we handle dependant state?&lt;/p&gt;

&lt;p&gt;For example, &lt;code&gt;dbConn&lt;/code&gt; produces a &lt;code&gt;connection&lt;/code&gt; variable, and &lt;code&gt;schemas&lt;/code&gt; consumes it. The two functions look like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dbConn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;someString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;success&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Return `connection` into the `results`&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;error&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;schemas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Do a bunch of stuff.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// results.dbConn has the connection.&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The result values of any task which another depends on are populated into the &lt;code&gt;results&lt;/code&gt; parameter.&lt;/p&gt;

&lt;p&gt;Finally, the &lt;code&gt;listen&lt;/code&gt; function accepts a final &lt;code&gt;(error, results)&lt;/code&gt;. Note it&amp;#39;s called as soon as &lt;strong&gt;any&lt;/strong&gt; task returns an error, so always make sure to handle errors. Finally, &lt;code&gt;results&lt;/code&gt; will have all of the return values of the tasks which were composed.&lt;/p&gt;

&lt;p&gt;This provides a compelling way to handle composability and dependencies without having to deal with complex callback changes. Functions will be invoked as their dependencies are resolved, and it&amp;#39;s easy to add or remove dependencies, changing what&amp;#39;s available in &lt;code&gt;results&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Give this pattern a try, it&amp;#39;s especially useful when combined with other functions available in async, like &lt;a href=&quot;https://github.com/caolan/async#seq&quot;&gt;&lt;code&gt;async.seq&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Hello, world.</title>
   <link href="http://hoverbear.org/2014/06/09/hello/"/>
   <updated>2014-06-09T00:00:00-07:00</updated>
   <id>http://hoverbear.org/2014/06/09/hello</id>
   <content type="html">&lt;p&gt;The genesis post.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// It all begins, in Rust.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;DOMContentLoaded&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// It all begins, in a browser.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 

</feed>
